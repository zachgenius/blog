<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zach&#39;s</title>
  <icon>https://blog.tama.me/icon.png</icon>
  
  <link href="https://blog.tama.me/atom.xml" rel="self"/>
  
  <link href="https://blog.tama.me/"/>
  <updated>2020-12-13T23:51:50.795Z</updated>
  <id>https://blog.tama.me/</id>
  
  <author>
    <name>Zach Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Building and Installing OP-TEE with AOSP on a Raspberry Pi 3B</title>
    <link href="https://blog.tama.me/2020/12/12/op-tee-raspberry-pi-3/"/>
    <id>https://blog.tama.me/2020/12/12/op-tee-raspberry-pi-3/</id>
    <published>2020-12-12T02:18:19.000Z</published>
    <updated>2020-12-13T23:51:50.795Z</updated>
    
    
    <summary type="html">&lt;p&gt;In my recent research, I have to install an instrument logic into the TrustZone, where the system level codes cannot access to, of the ARM SoC to monitor the behaviours of apps without any awareness. &lt;/p&gt;
&lt;p&gt;However, as a former mobile software engineer, it is struggling to understand the principle of TrustZone and find a way to manipulate it since most of my work was to interact with the system and SDK. Whatâ€™s even worse, most of the tutorials require Juno Development kit or HiKey, which are either extremely expensive or tricky to get. At present, I got a dozen of Raspberry Pi 3Bs in the lab. &lt;/p&gt;</summary>
    
    
    
    <category term="System" scheme="https://blog.tama.me/categories/System/"/>
    
    
    <category term="op-tee, TrustZone, raspberry pi" scheme="https://blog.tama.me/tags/op-tee-TrustZone-raspberry-pi/"/>
    
  </entry>
  
</feed>
